// // import React, { useState, useEffect, useRef } from "react";
// // import { DataTable } from "primereact/datatable";
// // import { Column } from "primereact/column";
// // import { Button } from "primereact/button";
// // import { Dialog } from "primereact/dialog";
// // import { InputText } from "primereact/inputtext";
// // import { InputTextarea } from "primereact/inputtextarea";
// // import { Toast } from "primereact/toast";
// // import { Dropdown } from "primereact/dropdown";
// // import { Tag } from "primereact/tag";

// // const ProductsDemo = () => {
// //   const [products, setProducts] = useState([]);
// //   const [productDialog, setProductDialog] = useState(false);
// //   const [selectedProduct, setSelectedProduct] = useState(null);
// //   const [variationDialog, setVariationDialog] = useState(false);
// //   const [variationOptions, ] = useState([]);
// //   const [variationValues,] = useState([]);
// //   const [selectedOption, setSelectedOption] = useState(null);
// //   const [selectedValues, setSelectedValues] = useState([]);
// //   const toast = useRef(null);

// //   useEffect(() => {
// //     // Cargar productos
// //     const fetchProducts = async () => {
// //       try {
// //         const response = await fetch(
// //           "https://shiny-space-journey-5g47xrgpjr9927j5v-8101.app.github.dev/AllproductsV"
// //         );
// //         const data = await response.json();
// //         setProducts(data);
// //       } catch (err) {
// //         console.error("Error al cargar los productos:", err);
// //       }
// //     };

// //     fetchProducts();
// //   }, []);

// //   const openNewProductDialog = () => {
// //     setSelectedProduct(null);
// //     setProductDialog(true);
// //   };

// //   const hideProductDialog = () => {
// //     setProductDialog(false);
// //   };

// //   const openVariationDialog = (product) => {
// //     setSelectedProduct(product);
// //     setVariationDialog(true);
// //   };

// //   const hideVariationDialog = () => {
// //     setVariationDialog(false);
// //   };

// //   const saveProduct = async () => {
// //     // Lógica para guardar un nuevo producto
// //     toast.current.show({
// //       severity: "success",
// //       summary: "Éxito",
// //       detail: "Producto guardado",
// //       life: 3000,
// //     });
// //     setProductDialog(false);
// //   };

// //   const saveVariations = async () => {
// //     if (selectedValues.length > 0) {
// //       try {
// //         for (const value of selectedValues) {
// //           const payload = {
// //             productVariationId: selectedProduct.id,
// //             variationValueId: value.id,
// //           };

// //           await fetch(
// //             "https://shiny-space-journey-5g47xrgpjr9927j5v-8101.app.github.dev/productVariationValue",
// //             {
// //               method: "POST",
// //               headers: { "Content-Type": "application/json" },
// //               body: JSON.stringify(payload),
// //             }
// //           );
// //         }
// //         toast.current.show({
// //           severity: "success",
// //           summary: "Éxito",
// //           detail: "Variaciones guardadas",
// //           life: 3000,
// //         });
// //         setVariationDialog(false);
// //       } catch (err) {
// //         console.error("Error al guardar variaciones:", err);
// //         toast.current.show({
// //           severity: "error",
// //           summary: "Error",
// //           detail: "No se pudieron guardar las variaciones",
// //           life: 3000,
// //         });
// //       }
// //     }
// //   };

// //   const imageBodyTemplate = (rowData) => {
// //     return (
// //       <img
// //         src={rowData.imageUrl}
// //         alt={rowData.name}
// //         className="shadow-2 border-round"
// //         style={{ width: "64px" }}
// //       />
// //     );
// //   };

// //   const actionBodyTemplate = (rowData) => {
// //     return (
// //       <React.Fragment>
// //         <Button
// //           icon="pi pi-pencil"
// //           className="p-button-rounded p-button-success mr-2"
// //           onClick={() => openNewProductDialog(rowData)}
// //         />
// //         <Button
// //           icon="pi pi-plus"
// //           className="p-button-rounded p-button-info"
// //           onClick={() => openVariationDialog(rowData)}
// //         />
// //       </React.Fragment>
// //     );
// //   };

// //   const variationBodyTemplate = (rowData) => {
// //     return rowData.variations.map((variation) => (
// //       <Tag
// //         key={variation.id}
// //         value={`${variation.name} - ${variation.price}`}
// //         severity="info"
// //         className="mr-2"
// //       />
// //     ));
// //   };

// //   return (
// //     <div>
// //       <Toast ref={toast} />
// //       <div className="card">
// //         <Button
// //           label="Nuevo Producto"
// //           icon="pi pi-plus"
// //           className="mb-3"
// //           onClick={openNewProductDialog}
// //         />
// //         <DataTable
// //           value={products}
// //           paginator
// //           rows={10}
// //           rowsPerPageOptions={[5, 10, 25]}
// //           dataKey="id"
// //           responsiveLayout="scroll"
// //         >
// //           <Column field="name" header="Nombre" sortable></Column>
// //           <Column field="description" header="Descripción" sortable></Column>
// //           <Column header="Imagen" body={imageBodyTemplate}></Column>
// //           <Column header="Variaciones" body={variationBodyTemplate}></Column>
// //           <Column header="Acciones" body={actionBodyTemplate}></Column>
// //         </DataTable>
// //       </div>

// //       {/* Diálogo para crear/editar producto */}
// //       <Dialog
// //         visible={productDialog}
// //         style={{ width: "450px" }}
// //         header="Detalles del Producto"
// //         modal
// //         className="p-fluid"
// //         onHide={hideProductDialog}
// //       >
// //         <div className="field">
// //           <label htmlFor="name">Nombre</label>
// //           <InputText
// //             id="name"
// //             value={selectedProduct?.name || ""}
// //             onChange={(e) =>
// //               setSelectedProduct({ ...selectedProduct, name: e.target.value })
// //             }
// //           />
// //         </div>
// //         <div className="field">
// //           <label htmlFor="description">Descripción</label>
// //           <InputTextarea
// //             id="description"
// //             value={selectedProduct?.description || ""}
// //             onChange={(e) =>
// //               setSelectedProduct({
// //                 ...selectedProduct,
// //                 description: e.target.value,
// //               })
// //             }
// //             rows={3}
// //           />
// //         </div>
// //         <Button label="Guardar" icon="pi pi-check" onClick={saveProduct} />
// //       </Dialog>

// //       {/* Diálogo para añadir variaciones */}
// //       <Dialog
// //         visible={variationDialog}
// //         style={{ width: "450px" }}
// //         header="Añadir Variaciones"
// //         modal
// //         className="p-fluid"
// //         onHide={hideVariationDialog}
// //       >
// //         <h3>Opciones de Variación</h3>
// //         <Dropdown
// //           value={selectedOption}
// //           options={variationOptions}
// //           onChange={(e) => setSelectedOption(e.value)}
// //           optionLabel="name"
// //           placeholder="Selecciona una opción"
// //           className="mb-2"
// //         />
// //         {selectedOption && (
// //           <Dropdown
// //             value={selectedValues}
// //             options={variationValues}
// //             onChange={(e) => setSelectedValues(e.value)}
// //             optionLabel="value"
// //             placeholder="Selecciona un valor"
// //             className="mb-2"
// //             multiple
// //           />
// //         )}
// //         <Button label="Guardar Variaciones" onClick={saveVariations} />
// //       </Dialog>
// //     </div>
// //   );
// // };

// // export default ProductsDemo;

// import React, { useState, useEffect, useRef } from "react";
// import { DataTable } from "primereact/datatable";
// import { Column } from "primereact/column";
// import { Button } from "primereact/button";
// import { Dialog } from "primereact/dialog";
// import { Tag } from "primereact/tag";
// import { Toast } from "primereact/toast";

// const ProductsDemo = () => {
//   const [products, setProducts] = useState([]);
//   const [selectedProduct, setSelectedProduct] = useState(null);
//   const [selectedVariation, setSelectedVariation] = useState(null);
//   const [productDialog, setProductDialog] = useState(false);
//   const toast = useRef(null);

//   useEffect(() => {
//     // Cargar productos
//     const fetchProducts = async () => {
//       try {
//         const response = await fetch(
//           "https://shiny-space-journey-5g47xrgpjr9927j5v-8101.app.github.dev/AllproductsV"
//         );
//         const data = await response.json();
//         setProducts(data);
//       } catch (err) {
//         console.error("Error al cargar los productos:", err);
//       }
//     };

//     fetchProducts();
//   }, []);

//   const openProductDialog = (product, variation) => {
//     setSelectedProduct(product);
//     setSelectedVariation(variation);
//     setProductDialog(true);
//   };

//   const hideProductDialog = () => {
//     setProductDialog(false);
//     setSelectedProduct(null);
//     setSelectedVariation(null);
//   };

//   const variationBodyTemplate = (rowData) => {
//     return rowData.variations.map((variation) => (
//       <div key={variation.id} className="mb-2">
//         <Tag
//           value={`${variation.name} - $${variation.price}`}
//           severity="info"
//           className="mr-2"
//         />
//         <Button
//           label="Ver"
//           icon="pi pi-eye"
//           className="p-button-text p-button-sm"
//           onClick={() => openProductDialog(rowData, variation)}
//         />
//       </div>
//     ));
//   };

//   return (
//     <div>
//       <Toast ref={toast} />
//       <div className="card">
//         <DataTable
//           value={products}
//           paginator
//           rows={10}
//           rowsPerPageOptions={[5, 10, 25]}
//           dataKey="id"
//           responsiveLayout="scroll"
//         >
//           <Column field="name" header="Nombre del Producto" sortable></Column>
//           <Column
//             field="description"
//             header="Descripción del Producto"
//             sortable
//           ></Column>
//           <Column
//             header="Variaciones"
//             body={variationBodyTemplate}
//             style={{ minWidth: "20rem" }}
//           ></Column>
//         </DataTable>
//       </div>

//       {/* Diálogo para mostrar detalles del producto y variación */}
//       <Dialog
//         visible={productDialog}
//         style={{ width: "450px" }}
//         header="Detalles del Producto"
//         modal
//         className="p-fluid"
//         onHide={hideProductDialog}
//       >
//         {selectedProduct && (
//           <>
//             <h3>Producto</h3>
//             <p>
//               <strong>Nombre:</strong> {selectedProduct.name}
//             </p>
//             <p>
//               <strong>Descripción:</strong> {selectedProduct.description}
//             </p>
//             <p>
//               <strong>Categoría ID:</strong> {selectedProduct.categoryId}
//             </p>
//             <p>
//               <strong>Proveedor ID:</strong> {selectedProduct.supplierId}
//             </p>
//             <p>
//               <strong>Creado:</strong>{" "}
//               {new Date(selectedProduct.createdAt).toLocaleString()}
//             </p>
//             <p>
//               <strong>Actualizado:</strong>{" "}
//               {new Date(selectedProduct.updatedAt).toLocaleString()}
//             </p>

//             {selectedVariation && (
//               <>
//                 <h3>Variación</h3>
//                 <p>
//                   <strong>Nombre:</strong> {selectedVariation.name}
//                 </p>
//                 <p>
//                   <strong>Precio:</strong> ${selectedVariation.price}
//                 </p>
//                 <p>
//                   <strong>Stock:</strong> {selectedVariation.stock}
//                 </p>
//                 <p>
//                   <strong>Imagen:</strong>
//                 </p>
//                 <img
//                   src={selectedVariation.imageUrl}
//                   alt={selectedVariation.name}
//                   style={{ width: "100%", borderRadius: "8px" }}
//                 />
//                 <h4>Valores de Variación</h4>
//                 {selectedVariation.variationValues.map((value) => (
//                   <p key={value.id}>
//                     <strong>{value.variationValue.option.name}:</strong>{" "}
//                     {value.variationValue.value}
//                   </p>
//                 ))}
//               </>
//             )}
//           </>
//         )}
//       </Dialog>
//     </div>
//   );
// };

// export default ProductsDemo;

// import React, { useState, useEffect, useRef } from "react";
// import { DataTable } from "primereact/datatable";
// import { Column } from "primereact/column";
// import { Button } from "primereact/button";
// import { Dialog } from "primereact/dialog";
// import { Tag } from "primereact/tag";
// import { Toast } from "primereact/toast";

// const ProductsDemo = () => {
//   const [products, setProducts] = useState([]);
//   const [selectedProduct, setSelectedProduct] = useState(null);
//   const [selectedVariation, setSelectedVariation] = useState(null);
//   const [productDialog, setProductDialog] = useState(false);
//   const toast = useRef(null);

//   useEffect(() => {
//     // Cargar productos
//     const fetchProducts = async () => {
//       try {
//         const response = await fetch(
//           "https://shiny-space-journey-5g47xrgpjr9927j5v-8101.app.github.dev/AllproductsV"
//         );
//         const data = await response.json();
//         setProducts(data);
//       } catch (err) {
//         console.error("Error al cargar los productos:", err);
//       }
//     };

//     fetchProducts();
//   }, []);

//   const openProductDialog = (product, variation) => {
//     setSelectedProduct(product);
//     setSelectedVariation(variation);
//     setProductDialog(true);
//   };

//   const hideProductDialog = () => {
//     setProductDialog(false);
//     setSelectedProduct(null);
//     setSelectedVariation(null);
//   };

//   const variationBodyTemplate = (rowData) => {
//     return rowData.variations.map((variation) => (
//       <div key={variation.id} className="mb-2">
//         <img
//           src={variation.imageUrl}
//           alt={variation.name}
//           style={{
//             width: "100px",
//             height: "100px",
//             objectFit: "cover",
//             borderRadius: "8px",
//             marginBottom: "8px",
//           }}
//         />
//         <Tag
//           value={`${variation.name} - $${variation.price}`}
//           severity="info"
//           className="mr-2"
//         />
//         <Button
//           label="Ver"
//           icon="pi pi-eye"
//           className="p-button-text p-button-sm"
//           onClick={() => openProductDialog(rowData, variation)}
//         />
//       </div>
//     ));
//   };

//   const actionBodyTemplate = (rowData) => {
//     return (
//       <React.Fragment>
//         <Button
//           icon="pi pi-pencil"
//           className="p-button-rounded p-button-success mr-2"
//           onClick={() => console.log("Editar producto", rowData)}
//         />
//         <Button
//           icon="pi pi-plus"
//           className="p-button-rounded p-button-info"
//           onClick={() => console.log("Añadir variación", rowData)}
//         />
//       </React.Fragment>
//     );
//   };

//   return (
//     <div>
//       <Toast ref={toast} />
//       <div className="card">
//         <DataTable
//           value={products}
//           paginator
//           rows={10}
//           rowsPerPageOptions={[5, 10, 25]}
//           dataKey="id"
//           responsiveLayout="scroll"
//         >
//           <Column field="name" header="Nombre del Producto" sortable></Column>
//           <Column
//             field="description"
//             header="Descripción del Producto"
//             sortable
//           ></Column>
//           <Column
//             header="Variaciones"
//             body={variationBodyTemplate}
//             style={{ minWidth: "20rem" }}
//           ></Column>
//           <Column header="Acciones" body={actionBodyTemplate}></Column>
//         </DataTable>
//       </div>

//       {/* Diálogo para mostrar detalles del producto y variación */}
//       <Dialog
//         visible={productDialog}
//         style={{ width: "450px" }}
//         header="Detalles del Producto"
//         modal
//         className="p-fluid"
//         onHide={hideProductDialog}
//       >
//         {selectedProduct && (
//           <>
//             <h3>Producto</h3>
//             <p>
//               <strong>Nombre:</strong> {selectedProduct.name}
//             </p>
//             <p>
//               <strong>Descripción:</strong> {selectedProduct.description}
//             </p>
//             <p>
//               <strong>Categoría ID:</strong> {selectedProduct.categoryId}
//             </p>
//             <p>
//               <strong>Proveedor ID:</strong> {selectedProduct.supplierId}
//             </p>
//             <p>
//               <strong>Creado:</strong>{" "}
//               {new Date(selectedProduct.createdAt).toLocaleString()}
//             </p>
//             <p>
//               <strong>Actualizado:</strong>{" "}
//               {new Date(selectedProduct.updatedAt).toLocaleString()}
//             </p>

//             {selectedVariation && (
//               <>
//                 <h3>Variación</h3>
//                 <p>
//                   <strong>Nombre:</strong> {selectedVariation.name}
//                 </p>
//                 <p>
//                   <strong>Precio:</strong> ${selectedVariation.price}
//                 </p>
//                 <p>
//                   <strong>Stock:</strong> {selectedVariation.stock}
//                 </p>
//                 <p>
//                   <strong>Imagen:</strong>
//                 </p>
//                 <img
//                   src={selectedVariation.imageUrl}
//                   alt={selectedVariation.name}
//                   style={{
//                     width: "100%",
//                     borderRadius: "8px",
//                     marginBottom: "8px",
//                   }}
//                 />
//                 <h4>Valores de Variación</h4>
//                 {selectedVariation.variationValues.map((value) => (
//                   <p key={value.id}>
//                     <strong>{value.variationValue.option.name}:</strong>{" "}
//                     {value.variationValue.value}
//                   </p>
//                 ))}
//               </>
//             )}
//           </>
//         )}
//       </Dialog>
//     </div>
//   );
// };

// export default ProductsDemo;
// login


// import React, { useState, useContext } from 'react';
// import { useNavigate } from 'react-router-dom';
// import { AuthContext } from '../service/AuthService';
// import '../css/login.css';
// import Brand from '../util/Brand';

// const Login = () => {
//   const [email, setEmail] = useState('');
//   const [password, setPassword] = useState('');
//   const { login } = useContext(AuthContext);
//   const navigate = useNavigate();

//   const handleSubmit = async (e) => {
//     e.preventDefault();
//     try {
//       const user = await login({ email, password });

//       if (!user || !user.id) {
//         throw new Error('No se pudo obtener la información del usuario.');
//       }

//       const response = await fetch(`http://localhost:8100/exam-responses/${user.id}/1`);
//       const data = await response.json();

//       navigate(data.length > 0 ? '/AllCourse' : '/Cursos');
//     } catch (error) {
//       console.error('Error al iniciar sesión:', error.message);
//       alert(error.message || 'Error al iniciar sesión. Verifica tus credenciales.');
//     }
//   };

//   return (
//     <div>
//       <Brand />
   
//     <div className="login-container">
//       <div className="left-section2">
//         <h1>Iniciar sesión y</h1>
//         <h2>Aprende a usar las librerías</h2>
//         <p className="register">
//           Si no tienes una cuenta regístrate <br />
//           ¡Puedes <a href="/register">registrarte aquí!</a>
//         </p>
//       </div>
//       <div>
//       <img src="/inicio.png" alt="inicio" className="image-illustration" />
//       </div>

//       <div className="right-section">
//         <form className="form" onSubmit={handleSubmit}>
//           <h2>Iniciar sesión</h2>
//           <input
//             type="email"
//             className="input"
//             placeholder="correo electrónico o nombre de usuario"
//             value={email}
//             onChange={(e) => setEmail(e.target.value)}
//             required
//           />
//           <input
//             type="password"
//             className="input"
//             placeholder="Contraseña"
//             value={password}
//             onChange={(e) => setPassword(e.target.value)}
//             required
//           />
//           <button type="submit">Iniciar sesión</button>
//         </form>
//         <div>
//         <p className='tc'>o continuar con</p>
//         <img src="https://img.icons8.com/?size=100&id=17949&format=png&color=000000" alt="Google logo" width="30" className="logogoogle" style={{ marginLeft: '190px' } } />
//         </div>
//         </div>
//     </div>
//     </div>
//   );
// };

// export default Login;


import React, { useState, useEffect, useRef } from 'react';
import { classNames } from 'primereact/utils';
import { DataTable } from 'primereact/datatable';
import { Column } from 'primereact/column';
import { ProductService } from './service/ProductService';
import { Toast } from 'primereact/toast';
import { Button } from 'primereact/button';
import { FileUpload } from 'primereact/fileupload';
import { Rating } from 'primereact/rating';
import { Toolbar } from 'primereact/toolbar';
import { InputTextarea } from 'primereact/inputtextarea';
import { IconField } from 'primereact/iconfield';
import { InputIcon } from 'primereact/inputicon';
import { RadioButton } from 'primereact/radiobutton';
import { InputNumber } from 'primereact/inputnumber';
import { Dialog } from 'primereact/dialog';
import { InputText } from 'primereact/inputtext';
import { Tag } from 'primereact/tag';

export default function ProductsDemo() {
    let emptyProduct = {
        id: null,
        name: '',
        image: null,
        description: '',
        category: null,
        price: 0,
        quantity: 0,
        rating: 0,
        inventoryStatus: 'INSTOCK'
    };

    const [products, setProducts] = useState(null);
    const [productDialog, setProductDialog] = useState(false);
    const [deleteProductDialog, setDeleteProductDialog] = useState(false);
    const [deleteProductsDialog, setDeleteProductsDialog] = useState(false);
    const [product, setProduct] = useState(emptyProduct);
    const [selectedProducts, setSelectedProducts] = useState(null);
    const [submitted, setSubmitted] = useState(false);
    const [globalFilter, setGlobalFilter] = useState(null);
    const toast = useRef(null);
    const dt = useRef(null);

    useEffect(() => {
        ProductService.getProducts().then((data) => setProducts(data));
    }, []);

    const formatCurrency = (value) => {
        return value.toLocaleString('en-US', { style: 'currency', currency: 'USD' });
    };

    const openNew = () => {
        setProduct(emptyProduct);
        setSubmitted(false);
        setProductDialog(true);
    };

    const hideDialog = () => {
        setSubmitted(false);
        setProductDialog(false);
    };

    const hideDeleteProductDialog = () => {
        setDeleteProductDialog(false);
    };

    const hideDeleteProductsDialog = () => {
        setDeleteProductsDialog(false);
    };

    const saveProduct = () => {
        setSubmitted(true);

        if (product.name.trim()) {
            let _products = [...products];
            let _product = { ...product };

            if (product.id) {
                const index = findIndexById(product.id);

                _products[index] = _product;
                toast.current.show({ severity: 'success', summary: 'Successful', detail: 'Product Updated', life: 3000 });
            } else {
                _product.id = createId();
                _product.image = 'product-placeholder.svg';
                _products.push(_product);
                toast.current.show({ severity: 'success', summary: 'Successful', detail: 'Product Created', life: 3000 });
            }

            setProducts(_products);
            setProductDialog(false);
            setProduct(emptyProduct);
        }
    };

    const editProduct = (product) => {
        setProduct({ ...product });
        setProductDialog(true);
    };

    const confirmDeleteProduct = (product) => {
        setProduct(product);
        setDeleteProductDialog(true);
    };

    const deleteProduct = () => {
        let _products = products.filter((val) => val.id !== product.id);

        setProducts(_products);
        setDeleteProductDialog(false);
        setProduct(emptyProduct);
        toast.current.show({ severity: 'success', summary: 'Successful', detail: 'Product Deleted', life: 3000 });
    };

    const findIndexById = (id) => {
        let index = -1;

        for (let i = 0; i < products.length; i++) {
            if (products[i].id === id) {
                index = i;
                break;
            }
        }

        return index;
    };

    const createId = () => {
        let id = '';
        let chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';

        for (let i = 0; i < 5; i++) {
            id += chars.charAt(Math.floor(Math.random() * chars.length));
        }

        return id;
    };

    const exportCSV = () => {
        dt.current.exportCSV();
    };

    const confirmDeleteSelected = () => {
        setDeleteProductsDialog(true);
    };

    const deleteSelectedProducts = () => {
        let _products = products.filter((val) => !selectedProducts.includes(val));

        setProducts(_products);
        setDeleteProductsDialog(false);
        setSelectedProducts(null);
        toast.current.show({ severity: 'success', summary: 'Successful', detail: 'Products Deleted', life: 3000 });
    };

    const onCategoryChange = (e) => {
        let _product = { ...product };

        _product['category'] = e.value;
        setProduct(_product);
    };

    const onInputChange = (e, name) => {
        const val = (e.target && e.target.value) || '';
        let _product = { ...product };

        _product[`${name}`] = val;

        setProduct(_product);
    };

    const onInputNumberChange = (e, name) => {
        const val = e.value || 0;
        let _product = { ...product };

        _product[`${name}`] = val;

        setProduct(_product);
    };

    const leftToolbarTemplate = () => {
        return (
            <div className="flex flex-wrap gap-2">
                <Button label="New" icon="pi pi-plus" severity="success" onClick={openNew} />
                <Button label="Delete" icon="pi pi-trash" severity="danger" onClick={confirmDeleteSelected} disabled={!selectedProducts || !selectedProducts.length} />
            </div>
        );
    };

    const rightToolbarTemplate = () => {
        return <Button label="Export" icon="pi pi-upload" className="p-button-help" onClick={exportCSV} />;
    };

    const imageBodyTemplate = (rowData) => {
        return <img src={`https://primefaces.org/cdn/primereact/images/product/${rowData.image}`} alt={rowData.image} className="shadow-2 border-round" style={{ width: '64px' }} />;
    };

    const priceBodyTemplate = (rowData) => {
        return formatCurrency(rowData.price);
    };

    const ratingBodyTemplate = (rowData) => {
        return <Rating value={rowData.rating} readOnly cancel={false} />;
    };

    const statusBodyTemplate = (rowData) => {
        return <Tag value={rowData.inventoryStatus} severity={getSeverity(rowData)}></Tag>;
    };

    const actionBodyTemplate = (rowData) => {
        return (
            <React.Fragment>
                <Button icon="pi pi-pencil" rounded outlined className="mr-2" onClick={() => editProduct(rowData)} />
                <Button icon="pi pi-trash" rounded outlined severity="danger" onClick={() => confirmDeleteProduct(rowData)} />
            </React.Fragment>
        );
    };

    const getSeverity = (product) => {
        switch (product.inventoryStatus) {
            case 'INSTOCK':
                return 'success';

            case 'LOWSTOCK':
                return 'warning';

            case 'OUTOFSTOCK':
                return 'danger';

            default:
                return null;
        }
    };

    const header = (
        <div className="flex flex-wrap gap-2 align-items-center justify-content-between">
            <h4 className="m-0">Manage Products</h4>
            <IconField iconPosition="left">
                <InputIcon className="pi pi-search" />
                <InputText type="search" onInput={(e) => setGlobalFilter(e.target.value)} placeholder="Search..." />
            </IconField>
        </div>
    );
    const productDialogFooter = (
        <React.Fragment>
            <Button label="Cancel" icon="pi pi-times" outlined onClick={hideDialog} />
            <Button label="Save" icon="pi pi-check" onClick={saveProduct} />
        </React.Fragment>
    );
    const deleteProductDialogFooter = (
        <React.Fragment>
            <Button label="No" icon="pi pi-times" outlined onClick={hideDeleteProductDialog} />
            <Button label="Yes" icon="pi pi-check" severity="danger" onClick={deleteProduct} />
        </React.Fragment>
    );
    const deleteProductsDialogFooter = (
        <React.Fragment>
            <Button label="No" icon="pi pi-times" outlined onClick={hideDeleteProductsDialog} />
            <Button label="Yes" icon="pi pi-check" severity="danger" onClick={deleteSelectedProducts} />
        </React.Fragment>
    );

    return (
        <div>
            <Toast ref={toast} />
            <div className="card">
                <Toolbar className="mb-4" left={leftToolbarTemplate} right={rightToolbarTemplate}></Toolbar>

                <DataTable ref={dt} value={products} selection={selectedProducts} onSelectionChange={(e) => setSelectedProducts(e.value)}
                        dataKey="id"  paginator rows={10} rowsPerPageOptions={[5, 10, 25]}
                        paginatorTemplate="FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink CurrentPageReport RowsPerPageDropdown"
                        currentPageReportTemplate="Showing {first} to {last} of {totalRecords} products" globalFilter={globalFilter} header={header}>
                    <Column selectionMode="multiple" exportable={false}></Column>
                    <Column field="code" header="Code" sortable style={{ minWidth: '12rem' }}></Column>
                    <Column field="name" header="Name" sortable style={{ minWidth: '16rem' }}></Column>
                    <Column field="image" header="Image" body={imageBodyTemplate}></Column>
                    <Column field="price" header="Price" body={priceBodyTemplate} sortable style={{ minWidth: '8rem' }}></Column>
                    <Column field="category" header="Category" sortable style={{ minWidth: '10rem' }}></Column>
                    <Column field="rating" header="Reviews" body={ratingBodyTemplate} sortable style={{ minWidth: '12rem' }}></Column>
                    <Column field="inventoryStatus" header="Status" body={statusBodyTemplate} sortable style={{ minWidth: '12rem' }}></Column>
                    <Column body={actionBodyTemplate} exportable={false} style={{ minWidth: '12rem' }}></Column>
                </DataTable>
            </div>

            <Dialog visible={productDialog} style={{ width: '32rem' }} breakpoints={{ '960px': '75vw', '641px': '90vw' }} header="Product Details" modal className="p-fluid" footer={productDialogFooter} onHide={hideDialog}>
                {product.image && <img src={`https://primefaces.org/cdn/primereact/images/product/${product.image}`} alt={product.image} className="product-image block m-auto pb-3" />}
                <div className="field">
                    <label htmlFor="name" className="font-bold">
                        Name
                    </label>
                    <InputText id="name" value={product.name} onChange={(e) => onInputChange(e, 'name')} required autoFocus className={classNames({ 'p-invalid': submitted && !product.name })} />
                    {submitted && !product.name && <small className="p-error">Name is required.</small>}
                </div>
                <div className="field">
                    <label htmlFor="description" className="font-bold">
                        Description
                    </label>
                    <InputTextarea id="description" value={product.description} onChange={(e) => onInputChange(e, 'description')} required rows={3} cols={20} />
                </div>

                <div className="field">
                    <label className="mb-3 font-bold">Category</label>
                    <div className="formgrid grid">
                        <div className="field-radiobutton col-6">
                            <RadioButton inputId="category1" name="category" value="Accessories" onChange={onCategoryChange} checked={product.category === 'Accessories'} />
                            <label htmlFor="category1">Accessories</label>
                        </div>
                        <div className="field-radiobutton col-6">
                            <RadioButton inputId="category2" name="category" value="Clothing" onChange={onCategoryChange} checked={product.category === 'Clothing'} />
                            <label htmlFor="category2">Clothing</label>
                        </div>
                        <div className="field-radiobutton col-6">
                            <RadioButton inputId="category3" name="category" value="Electronics" onChange={onCategoryChange} checked={product.category === 'Electronics'} />
                            <label htmlFor="category3">Electronics</label>
                        </div>
                        <div className="field-radiobutton col-6">
                            <RadioButton inputId="category4" name="category" value="Fitness" onChange={onCategoryChange} checked={product.category === 'Fitness'} />
                            <label htmlFor="category4">Fitness</label>
                        </div>
                    </div>
                </div>

                <div className="formgrid grid">
                    <div className="field col">
                        <label htmlFor="price" className="font-bold">
                            Price
                        </label>
                        <InputNumber id="price" value={product.price} onValueChange={(e) => onInputNumberChange(e, 'price')} mode="currency" currency="USD" locale="en-US" />
                    </div>
                    <div className="field col">
                        <label htmlFor="quantity" className="font-bold">
                            Quantity
                        </label>
                        <InputNumber id="quantity" value={product.quantity} onValueChange={(e) => onInputNumberChange(e, 'quantity')} />
                    </div>
                </div>
            </Dialog>

            <Dialog visible={deleteProductDialog} style={{ width: '32rem' }} breakpoints={{ '960px': '75vw', '641px': '90vw' }} header="Confirm" modal footer={deleteProductDialogFooter} onHide={hideDeleteProductDialog}>
                <div className="confirmation-content">
                    <i className="pi pi-exclamation-triangle mr-3" style={{ fontSize: '2rem' }} />
                    {product && (
                        <span>
                            Are you sure you want to delete <b>{product.name}</b>?
                        </span>
                    )}
                </div>
            </Dialog>

            <Dialog visible={deleteProductsDialog} style={{ width: '32rem' }} breakpoints={{ '960px': '75vw', '641px': '90vw' }} header="Confirm" modal footer={deleteProductsDialogFooter} onHide={hideDeleteProductsDialog}>
                <div className="confirmation-content">
                    <i className="pi pi-exclamation-triangle mr-3" style={{ fontSize: '2rem' }} />
                    {product && <span>Are you sure you want to delete the selected products?</span>}
                </div>
            </Dialog>
        </div>
    );
}
        